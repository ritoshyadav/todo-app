Question 1: DSA Given an array of integers, return the length of the longest increasing subsequence.A subsequence is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.For example, given the array[10, 9, 2, 5, 3, 7, 101, 18], the longest increasing subsequence is[2, 3, 7, 101], and its length is 4.

Ans:-
export const lengthOfLIS = (nums) => {
    if (nums.length === 0) return 0;

    const n = nums.length;
    const teamArray = new Array(n).fill(1);

    // Fill/Manage the teamArray
    for (let i = 1; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (nums[i] > nums[j]) {
                teamArray[i] = Math.max(teamArray[i], teamArray[j] + 1);
            }
        }
    }

    return Math.max(...teamArray);
}

const arr = [10, 9, 2, 5, 3, 7, 101, 18];
console.log(lengthOfLIS(arr));



Question 2: DSA Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target.You may assume that each input would have exactly one solution, and you may not use the same element twice.You can return the answer in any order.

Ans:-
export const twoSum = (nums, targetValue) => {
    const numToIndex = {};

    for (let i = 0; i < nums.length; i++) {
        const complement = targetValue - nums[i];
        if (complement in numToIndex) {
            return [numToIndex[complement], i];
        }
        numToIndex[nums[i]] = i;
    }

    return [];
}

const nums = [2, 7, 11, 15];
const targetValue = 9;
console.log(twoSum(nums, targetValue));


Question 3: MongoDB Aggregation Consider a MongoDB collection named sales with documents structured as follows:

json:

{

    "_id": ObjectId("..."),

    "date": ISODate("2024-06-15T00:00:00Z"),

    "store": "Store A",

    "items": [

        {

            "name": "item1",

            "quantity": 5,

            "price": 10.0

        },

        {

            "name": "item2",

            "quantity": 3,

            "price": 20.0

        }

    ]

}

Your task is to write an aggregation pipeline to calculate the total revenue generated by each store for each month, along with the average price of items sold. The result should be sorted first by store and then by month (in ascending order).

The expected output should be something like this:

json:

[

    {

        "store": "Store A",

        "month": "2024-06",

        "totalRevenue": 230.0,

        "averagePrice": 15.0

    },

    {

        "store": "Store B",

        "month": "2024-06",

        "totalRevenue": 150.0,

        "averagePrice": 12.5

    }

]


Ans:-
db.sales.aggregate([
    { "$unwind": "$items" },
    {
      "$addFields": {
        "month": {
          "$dateToString": { "format": "%Y-%m", "date": "$date" }
        }
      }
    },
    {
      "$group": {
        "_id": { "store": "$store", "month": "$month" },
        "totalRevenue": {
          "$sum": { "$multiply": ["$items.quantity", "$items.price"] }
        },
        "averagePrice": { "$avg": "$items.price" }
      }
    },
    {
      "$project": {
        "_id": 0,
        "store": "$_id.store",
        "month": "$_id.month",
        "totalRevenue": 1,
        "averagePrice": { "$round": ["$averagePrice", 2] }
      }
    },
    {
      "$sort": {
        "store": 1,
        "month": 1
      }
    }
  ])
  

  Question 4: React Build a Dynamic To-Do List Application in React.

Objective:

Create a React application that allows users to manage a to-do list with the following features:

Add new tasks
Mark tasks as complete
Delete tasks
Filter tasks by all, completed, and pending
Persist tasks in the local storage so that they are retained after a page refresh
Requirements:

UI Components:
Create a TodoApp component as the main component.
Create a TodoList component to display the list of tasks.
Create a TodoItem component to represent each task.
Create an AddTodo component for adding new tasks.
Create a Filter component to filter tasks.
State Management:
Use the useState and useEffect hooks for state management.
Use local storage to persist the tasks.
Functionality:
Add a new task with a text input.
Mark a task as complete/incomplete by clicking on it.
Delete a task.
Filter tasks by all, completed, and pending.
Persist tasks in local storage.
PS - You may use this API for the todo app - https://dummyjson.com/docs/todos#todos-a


Ans:-

